type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                     ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    '''print('Starting to make a coffee')
    print('Grinding coffee beans')
    print('Boiling water')
    print('Mixing boiled water with crushed coffee beans')
    print('Pouring coffee into the cup')
    print('Pouring some milk into the cup')
    print('Coffee is ready!')
    '''
    '''
    # ingredients


    cups = int(input('Write how many cups of coffee you will need:'))

    milk = 50
    water = 200
    coffee = 15

    print('For', cups, ' cups of coffee you will need:')
    milk_all = milk * cups
    water_all = water * cups
    cups_all = coffee * cups

    print(water_all, 'ml of water')
    print(milk_all, 'ml of milk')
    print(cups_all, 'g of coffee beans')
    '''

    '''
    # 3/4

    # cups
    # начало блока !!!!!!!!! промежуточные переменные для тестов!!!!!! удалить!!
    milk = 50
    water = 200
    coffee = 15
    #конец блока


    water_input = int(input('Write how many ml of water the coffee machine has:'))
    milk_input = int(input('Write how many ml of milk the coffee machine has:'))
    coffee_input = int(input('Write how many grams of coffee beans the coffee machine has:'))
    cups_input = int(input('Write how many cups your need:'))

    water_cups = (water_input // water)
    # print(water_cups)
    milk_cups = (milk_input // milk)
    # print(milk_cups)
    coffee_cups = (coffee_input // coffee)
    # print(coffee_cups)
    # минимальное количество кружек из всех ингридиентов min_cups
    min_cups = min(water_cups, milk_cups, coffee_cups)
    if cups_input == min_cups:
        print('Yes, I can make that amount of coffee')
    # дополнительные чашки кофе
    additional_cups = min_cups - cups_input
    if additional_cups > 0:
        print("Yes, I can make that amount of coffee (and even", abs(additional_cups), "more than that)")
    elif cups_input > min_cups:
        print('No, I can make only', min_cups, 'cups of coffee')

    '''

    # 4/6

    money = 550
    water = 400
    milk = 540
    coffee = 120
    cups = 9


    def state():
        print(water, " of water")
        print(milk, "of milk")
        print(coffee, "fo coffee beans")
        print(cups, " cups")
        print(money, " money")
        print()


    def has():
        print('The coffee machine has:')
        print()


    has()
    state()


    def buy_espresso():
        global water
        global coffee
        global money
        global cups
        global milk
        water = water - 250
        milk = milk
        coffee = coffee - 16
        money = money + 4
        cups = cups - 1


    def buy_latte():
        global water
        global coffee
        global money
        global cups
        global milk
        water = water - 350
        milk = milk - 75
        coffee = coffee - 20
        money = money + 7
        cups = cups - 1


    def buy_cappuccino():
        global water
        global coffee
        global money
        global cups
        global milk
        water = water - 200
        milk = milk - 100
        coffee = coffee - 12
        money = money + 6
        cups = cups - 1


    def fill():
        global water
        global coffee
        global cups
        global milk
        wat = int(input('Write how many ml of water do you want to add:\n'))
        water = water + wat

        mil = int(input('Write how many ml of milk do you want to add:\n'))
        milk = milk + mil

        cof = int(input('Write how many grams of coffee beans do you want to add:\n'))
        coffee = coffee + cof

        cup = int(input('Write how many disposable cups of coffee do you want to add:\n'))
        cups = cups + cup


    def take_my_money():
        global money
        print('I gave you $' + str(money))
        money = money - money


    # меню пользователей

    what_do = input('Write action (buy, fill, take):\n')


    if what_do == 'buy':
        what_coffee = input('What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: \n ')
        if what_coffee == '1':
           buy_espresso()
           state()
        if what_coffee == '2':
           buy_latte()
           state()
        if what_coffee == '3':
           buy_cappuccino()
           state()

    elif what_do == 'fill':
        fill()
        state()
    elif what_do == 'take':
        take_my_money()
        state()
    else:
        pass
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/370/implement
status: Solved
record: 5
